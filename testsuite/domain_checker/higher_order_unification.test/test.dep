Type : Type_1
Nat : Type
Z : Nat
S : Nat -> Nat

Vec : Type -> Nat -> Type
Nil : Vec t Z
Cons : t -> Vec t n -> Vec t (S n)

One : Nat
One = S Z

Two : Nat
Two = S One

T1 : Type
T2 : Type

T1 = Nat
T2 = Vec Nat Z

T1_Val_1 : T1
T1_Val_2 : T1
T2_Val_1 : T2

T1_Val_1 = Z
T1_Val_2 = (S Z)
T2_Val_1 = Nil

Nil_T1_Vec : Vec T1 Z
Nil_T2_Vec : Vec T2 Z

Nil_T1_Vec = Nil
Nil_T2_Vec = Nil

Witness : x -> Type
elim_w : Witness x -> Type

foo : P T1 -> P T2 -> Witness P

test_simple_imitate : Type
test_simple_imitate = elim_w (foo T1_Val_1 T1_Val_2)

test_simple_project : Type
test_simple_project = elim_w (foo T1_Val_1 T2_Val_1)

test_complex_project : Type
test_complex_project = elim_w (foo Nil_T1_Vec Nil_T2_Vec)

bar : x -> y -> P x -> P y -> Witness P

test_complex_imitate : Type
test_complex_imitate = elim_w (bar T1_Val_1 T2_Val_1 T1_Val_1 T1_Val_1)

test_complex_project_2 : Type
test_complex_project_2 = elim_w (bar T1_Val_1 T2_Val_1 T1_Val_1 T2_Val_1)

test_complex_project_3 : Type
test_complex_project_3 = elim_w (bar T1_Val_1 T2_Val_1 Nil_T1_Vec Nil_T2_Vec)
