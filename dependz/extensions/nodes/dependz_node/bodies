Fresh_Symbol_Count : Integer := 0;

package Node_To_Int_Maps is new Ada.Containers.Hashed_Maps
  (Key_Type        => Mmz_Key_Item,
   Element_Type    => Natural,
   Hash            => Hash,
   Equivalent_Keys => "=");

Global_Integer_Map : Node_To_Int_Maps.Map;

function P_Next_Global_Integer
  (Node : access Bare_Dependz_Node_Type'Class) return Integer
is
   Key : Mmz_Key_Item :=
     (Kind => Mmz_Bare_Dependz_Node,
      As_Bare_Dependz_Node => Bare_Dependz_Node (Node));

   Elem : Node_To_Int_Maps.Cursor := Global_Integer_Map.Find (Key);

   Result : Integer := 0;
begin
   if Node_To_Int_Maps.Has_Element(Elem) then
      Result := Node_To_Int_Maps.Element(Elem) + 1;
      Global_Integer_Map.Replace_Element(Elem, Result);
   else
      Global_Integer_Map.Insert(Key, Result);
   end if;
   return Result;
end P_Next_Global_Integer;

function P_Create_Logic_Var
  (Node : access Bare_Dependz_Node_Type'Class) return Logic_Var is
   V : Logic_Var := Entity_Vars.Create;
begin
   if Node.Kind in Dependz_Term then
      V.Dbg_Name := new String'
        (Image (P_To_String (Convert_Dependz_Node_To_Term
          (Bare_Dependz_Node (Node))).Items));
   end if;
   return V;
end P_Create_Logic_Var;

function P_Create_Named_Logic_Var
  (Node : access Bare_Dependz_Node_Type'Class;
   Name : Symbol_Type) return Logic_Var is
   V : Logic_Var := Entity_Vars.Create;
begin
   V.Dbg_Name := new String'(Image (Name));
   return V;
end P_Create_Named_Logic_Var;

function P_Concat_Symbol_And_Integer
  (Node : access Bare_Dependz_Node_Type'Class;
   S : Symbol_Type;
   I : Integer) return Symbol_Type
is
   Int_Str : Wide_Wide_String := I'Wide_Wide_Image;
begin
   return Lookup_Symbol
     (Node.Unit.Context,
      Image (S) & "$" & Int_Str (2 .. Int_Str'Last));
end P_Concat_Symbol_And_Integer;

function P_Dump_Mmz_Map
  (Node : access Bare_Dependz_Node_Type'Class) return Boolean
is
   use Memoization_Maps;
   Mmz_Map : Map renames Node.Unit.Memoization_Map;
   C : Cursor := Mmz_Map.First;
begin
   loop
      exit when C = No_Element;
      declare
         K : Mmz_Key := Memoization_Maps.Key (C);
         N : Bare_Term;
      begin
         case K.Property is
            when Mmz_Bare_Term_P_Normalize =>
               N := K.Items (1).As_Bare_Term;
               Put_Line (Image (P_To_String (N).Items));
            when others =>
               null;
         end case;
      end;
      C := Memoization_Maps.Next (C);
   end loop;
   Put_Line (Memoization_Maps.Length (Mmz_Map)'Image);
   return True;
end P_Dump_Mmz_Map;
