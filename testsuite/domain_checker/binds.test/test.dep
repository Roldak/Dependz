Nat : Type
Z : Nat
S : Nat -> Nat

Vec : Type -> Nat -> Type
Nil : Vec t Z
Cons : t -> Vec t n -> Vec t (S n)

One : Nat
One = S Z

Two : Nat
Two = S One

foo : n:Nat -> Vec Nat n -> Nat
foo = \x.\xs. x

test_1 : Nat
test_1 = foo (S Z) (Cons Z Nil)

id : t -> t
id = \x. x

test_2 : Nat
test_2 = foo (id Z) Nil

test_3 : m:Nat -> Vec Nat m -> Nat
test_3 = foo

