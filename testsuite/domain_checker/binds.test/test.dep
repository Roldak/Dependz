Type1 : Type2
Type : Type1
Nat : Type
Z : Nat
S : Nat -> Nat

Vec : Type -> Nat -> Type
Nil : Vec t Z
Cons : t -> Vec t n -> Vec t (S n)

One : Nat
One = S Z

Two : Nat
Two = S One

foo : n:Nat -> Vec Nat n -> Nat
foo = \x.\xs. x

test_1 : Nat
test_1 = foo (S Z) (Cons Z Nil)

id : t -> t
id = \x. x

test_2 : Nat
test_2 = foo (id Z) Nil

test_3 : m:Nat -> Vec Nat m -> Nat
test_3 = foo

filled : n:Nat -> t -> Vec t n

test_4 : m:Nat -> Nat -> Vec Nat m
test_4 = \x. \y. filled x Z

bar : (S n):Nat -> Nat

test_5 : Nat
test_5 = bar (S (S Z))

test_6 : (S n):Nat -> Nat -> Vec Nat (S n)
test_6 = \x. \y. filled x Z

elim_nat : t:tp -> P:(Nat -> t) -> P Z -> (k:Nat -> P (S k)) -> x:Nat -> P x

test_elim : j:Nat -> Nat
test_elim = elim_nat Type (\x. Nat) Z id

tes_elim_2 : n:Nat -> Vec Nat n
tes_elim_2 = elim_nat Type (\y. Vec Nat y) Nil (\y. Cons Z (test_elim_2 y))

