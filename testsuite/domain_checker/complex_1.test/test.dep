Type : Type
Nat : Type
Z : Nat
S : Nat -> Nat

A : Type
mkA : A

B : Type
mkB : B

C : Type
mkC : C

elim_nat : P Z -> (k:Nat -> P (S k)) -> x:Nat -> P x
elim_nat = \b. \p. match (case Z b (case S p))

test_1 : a:Nat -> elim_nat A (\b. elim_nat B (\c. C) b) a
test_1 = elim_nat mkA (\f. elim_nat mkB (\g. mkC) f)

WrappedNat : Nat -> Type
MkWrapped : n:Nat -> WrappedNat n

test_2 : m:Nat -> WrappedNat m
test_2 = \h. elim_nat (MkWrapped Z) (\j. elim_nat (MkWrapped (S Z)) (\i. MkWrapped (S (S i))) j) h
