Type1 : Type2
Type : Type1
Nat : Type
Z : Nat
S : Nat -> Nat

Vec : Type -> Nat -> Type
Nil : Vec t Z
Cons : t -> Vec t n -> Vec t (S n)

id : t -> t
id = \x. x

elim_nat : P Z -> (k:Nat -> P (S k)) -> x:Nat -> P x
elim_nat = \b. \p. match (case Z b (case S p))

test_elim : j:Nat -> Nat
test_elim = elim_nat Z id

test_elim_2 : n:Nat -> Vec Nat n
test_elim_2 = elim_nat Nil (\y. Cons Z (test_elim_2 y))

test_elim_3 : n:Nat -> Type
test_elim_3 = elim_nat Nat (\n. Vec Nat Z)

test_elim_4 : n:Nat -> elim_nat Nat (Vec Nat) n
test_elim_4 = elim_nat Z test_elim_2

test_elim_5 : Vec Nat Z
test_elim_5 = test_elim_4 (S Z)
