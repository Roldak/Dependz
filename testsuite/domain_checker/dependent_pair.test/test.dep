Type : Type_1
Nat : Type
Z : Nat
S : Nat -> Nat

Vec : Type -> Nat -> Type
Nil : Vec t Z
Cons : t -> Vec t n -> Vec t (S n)

One : Nat
One = S Z

Two : Nat
Two = S One

Pair : a -> b -> Type
MkPair : a -> b -> Pair a b

test_pair : Pair Nat Nat
test_pair = MkPair Z (S Z)

DPair : a:t -> P : (a -> t) -> Type
DPMake : x:a -> P x -> DPair a P

test_dpair : DPair Nat (\n. Vec Nat n)
test_dpair = DPMake (S Z) (Cons Z Nil)

test_dpair_2 : DPair Type (\t. Vec t (S Z))
test_dpair_2 = DPMake Nat (Cons Z Nil)
